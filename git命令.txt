git config --global color.ui true让git显示颜色。
           --global alias.<newname> <name>用新的名称代替旧的命令名称。（其中加上--global是针对当前用户起作用的，如果不加的话就只是针对当前的仓库起作用。）
cd <file>创建一个新目录
pwd显示当前目录
git init把这个目录变成Git可以管理的仓库
git add <file>添加文件到git仓库
git commit -m <message>一次提交多个文件，把文件提交到仓库（-m后面的内容是本次提交的说明，可以输入任意内容）
git status查看仓库当前状态（随时使用）
git diff查看作出的修改（修改完后记得将文件添加到仓库）
git log查看历史修改记录（如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数）
        --graph查看分支合并图。（如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数）
git rebase将本地末push的分叉提交历史整理成直线。
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
git reset --hard HEAD^指回退到上个版本的已提交状态（其中--hard会回退到上个版本的已提交状态，而--soft会回退到上个版本的未提交状态，--mixed会回退到上个版本已添加但未提交的状态。）
          --hard “版本号前几位”（指定回到过去的某个版本）
          HEAD <file>指将上一次在暂存区的修改回退到工作区。
git reflog查看每一次的命令
git checkout -- <file>指将某个文件在工作区的修改全部撤销。（让这个文件回到最近一次git commit或git add的状态）
             -b <branch>表示创建并切换到一个分支（相当于git branch <branch>和git checkout <branch>两条命令）
             -b <branch> origin/<branch>在本地创建和远程分支对应的分支.(本地和远程分支的名称最好一致)
             <branch>切换到某一个分支（其中<branch>指的是分支的名字）
git switch -c <branch>创建并切换到新的<branch>分支
           <branch>直接切换到已有的<branch>分支
git merge <branch>将一个分支的内容合并到当前分支
          --no-ff -m"merged bug fix 101" <branch>（其中bug fix 101指的是在分支<branch>上提交的内容的主题）
          合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git branch 查看当前分支
           -d <branch>删除一个分支
           -D <branch>强行删除一个分支<branch>(分支里面没有上传的内容也会被删除。)
           --set-upstream-to <branch-name> origin/<branch-name>创建本地分支和远程分支的链接关系。
git cherry-pick <commit>复制一个特定的提交到当前分支（其中<commit>指的是特定分支的编号）
关于分支：1.分支之间的跳转，需要保证该分支下工作区、暂存区与分支提交相同，无修改：即git diff HEAD 无差异；否则在分支跳转时会出现报错情况，无法跳转
         2.分支跳转完成后后，工作区目录会恢复到当前分支最近一次提交下的目录情况，即不同分支底下的目录内容即便存在差异，也不会互相干扰泾渭分明。
rm <file>指删除某个文件
git rm <file>指删除版本库中的文件（删除之后记得git commit -m"remove <file>"说一声自己删除了文件）
cat <file>查看对应文件内容
git remote查看远程库的信息。（在后面加上-v可以显示更加详细的内容）
           add origin git@server-name:path/repo-name.git关联一个远程库（其中origin指的是远程库的名字，这里默认是origin，server-name指服务器名称，path指的是自己的用户名，repo-name.git指的是自己的本地库。可以关联多个远程库。）
git push -u origin master第一次推送master分支的所有内容（其中origin是远程库的名字）
         origin master推送最新修改（把master换成别的分支的名字后就是推送其它分支的内容到远程库）
git pull抓取远程库的新提交。(如果有冲突要优先处理冲突。) 
多人协作的工作模式：1.首先，可以尝试用git push origin <branch-name>推送自己的修改；
                  2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
                  3.如果合并有冲突，则解决冲突，并在本地提交；
                  4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
git clone git@server-name:path/repo-name.git克隆一个仓库（server-name指服务器名称，path指的是自己的用户名，repo-name.git是远程库的名称）克隆完之后记得添加cd repo-name然后用ls查看本地库里的文件）
git stash隐藏当前工作现场。
          list查看工作现场。
恢复工作现场：1.git stash apply恢复后stash内容不会删除。
             2.git stash drop恢复的同时把stash里的内容也删了。
git tag 查看所有标签
        <tagname>新建一个标签，默认为当前版本HEAD，也可以在后面指定一个commit id
        -a <tagname> -m "describle"可以指定一个标签信息，其中describle就是内容。（默认为当前版本HEAD，也可以在后面指定一个commit id）
git show <tagname>展示某个标签所关的内容
git tag -d <tagneme>删除一个本地标签
git push origin :refs/tags/<tagneme>删除一个远程标签。
                <tagneme>推送一个本地标签到远程库。
                --tags推送所有未推送过的本地标签。
引号的使用规则：如果一个参数没有空格，就可以不用引号
               git commit -m update
               如果一个参数有空格，就必须加引：
               git commit -m "update README.txt"
               如果参数有双引号就用单引号
               git commit -m 'update "README.txt"'
               如果参数有单引号就用双引号
               git commit -m "update 'README.txt'"
               单引号和双引号还有一些细微区别，可以去看bash手册。
每个仓库的Git配置文件都放在.git/config文件中
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中