python中不同括号的意义：
                      1.（）代表tuple元组数据类型。
                      2.[]代表list列表数据类型。
                      3.{}代表dict或set数据类型。
用print()在括号中加上字符串，就可以向屏幕上输出指定的文字。
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出
print()会依次打印每个字符串，遇到逗号“,”会输出一个空格
input()让用户输入字符串，并存放到一个变量里（input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情）
数据类型：整数、浮点数（小数）、字符串（以单引号'或双引号"括起来的任意文本，但是''或""本身只是一种表示方式，不是字符串的一部分）
转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\（\后面的内容是被转义的）
用r''……''表示引号内部的字符串默认不转义
用多行字符串'''……'''的格式表示多行内容（可以在前面加r表示内部的字符串默认不转义）
空值None是Python里一个特殊的值。（None不能理解为0，因为0是有意义的，而None是一个特殊的空值）

布尔值：and运算是与运算，只有所有都为True，and运算结果才是True。
       or运算是或运算，只要其中有一个为True，or运算结果就是True。
       not运算是非运算，它是一个单目运算符，把True变成False，False变成True。

除法：/除法计算结果是小数，即使是两个整数恰好整除，结果也是小数
     //，称为地板除，两个整数的除法仍然是整数。
     %，余数算法，得出的结果为两个数相除的余数。

字符串：用ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符，len()计算包含多少字符
格式化：
占位符：%s表示用字符串替换；
       %d表示用整数替换；
       %f表示浮点数；（整数和浮点数还可以指定是否补0和整数与小数的位数。如：%.2f表示保留两位小数。）
       %x表示十六进制整数。
       如果字符串里面的%是一个普通字符就需要转义，用%%来表示一个%（有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略）
format()：用传入的参数依次替换字符串内的占位符{0}、{1}……。如：>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)  
                                                            'Hello, 小明, 成绩提升了 17.1%'
f-string:字符串如果包含{xxx}，就会以对应的变量替换.如：>>> r = 2.5
                                                    >>> s = 3.14 * r ** 2
                                                    >>> print(f'The area of a circle with radius {r} is {s:.2f}')
                                                    The area of a circle with radius 2.5 is 19.62
                                                    (上述代码中，{r}被变量r的值替换，{s:.2f}被变量s的值替换，并且:后面的.2f指定了格式化参数（即保留两位小数）
                                                    因此，{s:.2f}的替换结果是19.62)
list:符号为[]
     如果一个list中一个元素也没有，就是一个空的list，它的长度为0。
     list是一种有序的集合，可以随时添加和删除其中的元素。（list本身也可以作为元素）
     比如，列出班里所有同学的名字，就可以用一个list表示>>> classmates = ['Michael', 'Bob', 'Tracy']
                                                   >>> classmates
                                                   ['Michael', 'Bob', 'Tracy']
     变量classmates就是一个list。用len()函数可以获得list元素的个数。
     用索引来访问list中每一个位置的元素，记得索引是从0开始的（从左到右依次是012……）
     如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素。（从右往左依次是-1-2……）
     在变量后面加.append('……')可以往末尾追加元素。
                .insert(1,'……')把元素插入到指定的位置。（其中1为索引号，省略号为插入的内容。）
                .pop()删除list末尾的元素。（往括号内加索引号可以删除指定位置的元素）
                【】 = 往中括号内加索引号可以赋值给对应的索引位置。
条件判断：在Python程序中，用if语句实现：（如果if语句判断是True，就把缩进的两行print语句执行了）
                                   age = 20
                                   if age >= 18:
                                   print('your age is', age)
                                   print('adult')
       也可以给if添加一个else语句，意思是，如果if判断是False，不要执行if的内容，去把else执行了（注意不要少写了冒号:）
       elif是else if的缩写，完全可以有多个elif
       elif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：
                                                                        if <条件判断1>:
                                                                           <执行1>
                                                                        elif <条件判断2>:
                                                                           <执行2>
                                                                        elif <条件判断3>:
                                                                           <执行3>
                                                                        else:
                                                                           <执行4>
       if语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else 
模式匹配：
   如果要针对某个变量匹配若干种情况，可以使用match语句。（使用match语句时，我们依次用case xxx匹配，并且可以在最后（且仅能在最后）加一个case _表示“任意值”）
                 如：     score = 'B'                  如果用match语句改写，则改写如下：score = 'B'      
                       if score == 'A':                                            match score:
                           print('score is A.')                                        case 'A':
                       elif score == 'B':                                                   print('score is A.')
                           print('score is B.')                                        case 'B':
                       elif score == 'C':                                                   print('score is B.')
                           print('score is C.')                                        case 'C':
                       else:                                                                print('score is C.')
                           print('invalid score.')                                     case _: # _表示匹配到其他任何情况
                                                                                            print('score is ???.')
   1.match语句可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量。如:case x if x < 10表示当age < 10成立时匹配，且赋值给变量x
                                                                                                case 11|12|...|18能匹配多个值，用|分隔
   2.match语句还可以匹配列表.如：case ['gcc']表示列表仅有'gcc'一个字符串
                               case ['gcc', file1, *files]表示列表第一个字符串是'gcc'，第二个字符串绑定到变量file1，后面的任意个字符串绑定到*files。（其中*实际上表示至少指定一个文件）
循环：
    1.for...in循环，依次把list或tuple中的每个元素依次显示出来。
      for x in ...循环，把每个元素代入变量x，然后执行缩进块。
    2.while循环，只要条件满足，就不断循环，条件不满足时退出循环。如：while n>0:
                                                                      n=n-2 (在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。)
    break语句可以结束循环。continue结束本轮循环。（这两个语句通常都必须配合if语句使用）
数据查找方式：
           1.dict(用{'','',...}列出每个元素)
            (1)创建初始数据：d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}将数据一一对应。
            (2)可以通过key放入:d['Adam'] = 67(一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉) 
            (3)通过in或get()判断数据是否存在。（用get()可以自己指定返回的内容如：d.get('Thomas', -1)）
            (4)用pop(key)删除数据。
           2.set(用{x,y,z,...}列出每个元素)
            (1)可以提供一个list作为输入集合;
            (2)重复元素在set中自动被过滤;
            (3)通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果;
            (4)通过remove(key)方法可以删除元素;
            (5)两个set可以做数学意义上的交集、并集等操作。(&表示交集，|表示并集。)                